0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--registry',
1 verbose cli   'https://registry.npmjs.org' ]
2 info using npm@2.14.7
3 info using node@v4.2.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/cbutler/Workspace/NGN/Components/chassis/webcomponents',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/cbutler/.npm/ngn-chassis-components/0.0.22/package.tgz',
9 verbose tar pack   '/Users/cbutler/Workspace/NGN/Components/chassis/webcomponents' ]
10 verbose tarball /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package.tgz
11 verbose folder /Users/cbutler/Workspace/NGN/Components/chassis/webcomponents
12 info prepublish ngn-chassis-components@0.0.22
13 verbose addLocalTarball adding from inside cache /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package.tgz
14 silly cache afterAdd ngn-chassis-components@0.0.22
15 verbose afterAdd /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package/package.json not in flight; writing
16 verbose afterAdd /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package/package.json written
17 silly publish { name: 'ngn-chassis-components',
17 silly publish   version: '0.0.22',
17 silly publish   description: 'NGN Chassis Web Components',
17 silly publish   main: 'index.js',
17 silly publish   scripts:
17 silly publish    { test: 'echo No tests. Build process only.',
17 silly publish      create: 'gulp create',
17 silly publish      build: 'gulp build' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/ngnjs/chassis-components.git' },
17 silly publish   keywords: [ 'ngn', 'web', 'components', 'chassis' ],
17 silly publish   author: { name: 'Corey Butler', url: 'http://coreybutler.com' },
17 silly publish   contributors: [ { name: 'Graham Butler', url: 'http://grahambutler.com' } ],
17 silly publish   license: 'MIT',
17 silly publish   bugs: { url: 'https://github.com/ngnjs/chassis-components/issues' },
17 silly publish   homepage: 'http://ngn.js.org',
17 silly publish   devDependencies:
17 silly publish    { 'caniuse-api': '^1.4.1',
17 silly publish      del: '^2.0.2',
17 silly publish      esprima: '^2.7.1',
17 silly publish      gulp: '^3.9.0',
17 silly publish      'gulp-concat': '^2.6.0',
17 silly publish      'gulp-header': '^1.7.1',
17 silly publish      'gulp-prompt': '^0.1.2',
17 silly publish      localenvironment: '^1.0.0',
17 silly publish      snazzy: '^2.0.1',
17 silly publish      standard: '^5.3.1',
17 silly publish      'uglify-js': '^2.6.1' },
17 silly publish   standard:
17 silly publish    { ignore: [ '_*', '_**/*', 'dist/**/*', 'gulpfile.js', 'src/jsonp.js' ],
17 silly publish      globals:
17 silly publish       [ 'NGN',
17 silly publish         'NGNX',
17 silly publish         'window',
17 silly publish         'DOMParser',
17 silly publish         'XMLHttpRequest',
17 silly publish         'FormData',
17 silly publish         'btoa',
17 silly publish         'localStorage' ] },
17 silly publish   readme: '# NGN Chassis Web Components\n\nThe NGN Web Components library is a collection of vanilla web components. The\nlibrary is designed to isolate common functionality and deliver it in a simple,\nreusable manner.\n\nFor a list of components, see the [custom tags directory](./tree/master/tags).\nYou can also see these elements in action by looking at the [examples site](http://ngnjs.github.io/chassis-components/documentation).\nUnfamiliar with NGN? Head over to the [ngn.js.org](http://ngn.js.org).\n\n## Using NGN Web Components\n\nThe web components are available via the [JSDelivr CDN](http://www.jsdelivr.com/projects/ngn-webcomponents),\nnpm, or bower. You can also download them from the [releases page](./releases).\n\nMost of the components use the [shadow DOM](http://w3c.github.io/webcomponents/spec/shadow/),\nwhich is a major part of web components. However; Chrome & Opera are the only browsers\ncurrently supporting it (as of 1/7/16). This also means tools like [Electron](https://electron.atom.io)\nand [NW.js](http://nwjs.io) natively support shadow DOM and other web component\nfeatures. For other browsers, Google has provided a polyfill that can be used\nuntil other browsers catch up. So, a common way to use NGN web components\nacross modern browsers (IE 11+) looks like:\n\n```html\n<!DOCTYPE html>\n<html class="no-js">\n<head>\n  <meta charset="utf-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">\n  <meta name="viewport" content="width=device-width">\n  <script src="https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js"></script>\n  <script src="//cdn.jsdelivr.net/ngn-components/latest/ngn-cycle.min.js"></script>\n  <!-- <link rel="import" href="//cdn.jsdelivr.net/ngn-components/latest/ngn-cycle.min.js"/> -->\n</head>\n\n<body>\n  <ngn-cycle restart="true">\n    <section class="active">\n      Screen 1\n    </section>\n    <section>\n      Screen 2\n    </section>\n    <section>\n      Screen 3\n    </section>\n  </ngn-cycle>\n</body>\n\n</html>\n```\n\nEach web component has it\'s own special documentation listed in it\'s [folder](./tree/master/tags).\nBe sure to review these for detailed information about the specific components\nyou\'re interested in.\n\n**Production Use**\n\nIf you\'re using these components in a production website, it is probably best to\nuse the concatenation features of JSDelivr. Select the components you wish to use\nand include them in one HTTP request. Alternatively, you may find\n[NGN Chassis HTTP Preconnect](https://github.com/ngnjs/chassis-lib/blob/master/src/http.js#L631)\nhelpful, or use `preconnect` directly in the `<head>` of your HTML page. For\nmore information about preconnect, see\n[Ilya Grigorik\'s Preconnect article](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/).\n\n### Bower\n\nIf you use bower to manage UI dependencies, you can install & use it as follows:\n\n```sh\nbower install chassis-components\n```\n\nIn your HTML:\n\n```html\n<html>\n  <head>\n    <script src="https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js"></script>\n    <script src="bower_components/chassis-components/dist/<tag>.min.js"></script>\n    <!-- <link rel="import" href="bower_components/chassis-components/dist/<tag>.html"/> -->\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n### npm\n\nThe npm installation is designed for projects in a node-like environment, such\nas [electron](http://electron.atom.io) or [NW.js](http://nwjs.io). Usage is\nstraightforward:\n\n```sh\nnpm install ngn-chassis-components\n```\n\n```html\n<html>\n  <head>\n    <script src="https://cdn.jsdelivr.net/webcomponentsjs/latest/webcomponents.min.js"></script>\n    <script src="node_modules/ngn-chassis-components/dist/<tag>.min.js"></script>\n    <!-- <link rel="import" href="node_modules/ngn-chassis-components/dist/<tag>.html"/> -->\n  </head>\n  <body>\n    ...\n  </body>\n</html>\n```\n\n# Creating New Components (Hacking)\n\nIf you want to create a new NGN web component, you should first post an issue\nor reach out to the NGN team to assure we\'ll accept it. We are absolutely\ninterested in community contributions, but we also have a strict philosophy\nof keeping things simple. For example, we won\'t accept tags like `<my-whole-app>`,\nbut we will consider small, reusable tags.\n\nWhen you\'re ready to start building a component, the easiest way is to clone\nthis repository using `git clone https://github.com/ngnjs/chassis-components.git`.\nWe use [Node.js](http://nodejs.org) for our build process, so you\'ll need that\ninstalled. Then run `npm install` to install all of the dependencies. Finally,\nrun `gulp create` or `npm run create` to launch the new component wizard.\n\nThe new component wizard prompts for some simple input, then uses base templates\nto generate starter code.\n\n**Why should I use the wizard?**\n\nIn order to deliver components via CDN, we have our own build process that\nsmartly concatenates all files into a single JavaScript file. It\'s similar\n(conceptually) to Polymer\'s Vulcanize utility. You can run this utility\nby executing `gulp build` or `npm run build` to see the output.\n\nThe build tool generates a debuggable JS script, a minified version, and an HTML\nwrapper for use with [HTML Imports](http://w3c.github.io/webcomponents/spec/imports/).\nWe use this process to automatically generate production-ready components and\nupload them to the CDN through our automated release process.\n\n### PAY ATTENTION TO initTpl\n\nThe wizard will generate a `tag.js` file. Within this file, you\'ll notice a\nmethod/attribute called `initTpl`. This is a standard method that constructs\nyour component for you while you develop it. This method allows you to maintain\nyour template HTML/CSS and JS in different files. The build process replaces this\nmethod with a more compact one specifically designed for production use. The simple\nexplanation is the HTML/CSS gets converted to text and embedded in this file, making\nit simple to deploy all of the component\'s assets in a single file.\n\nMost developers shouldn\'t really need to care about `initTpl`. As long as it\nexists and is executed in the `createdCallback` method (i.e. `this.initTpl()`),\nyour component should just work... in development or in production.\n\nIf you have questions, create an issue and we\'ll do our best to help.\n\n## License\n\nAll components are licensed as MIT unless otherwise noted.\nCopyright &copy; 2016 Ecor Ventures LLC. All Rights Reserved.\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '6881cbd8c25828337abbea8b21501af5433aacd1',
17 silly publish   _id: 'ngn-chassis-components@0.0.22',
17 silly publish   _shasum: '50bb599afb020ba6b7d5a343ba1a77de7ebaae03',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name ngn-chassis-components
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/ngn-chassis-components
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/cbutler/.npm/ngn-chassis-components/0.0.22/package.tgz
25 verbose request uri https://registry.npmjs.org/ngn-chassis-components
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 5:54:14 PM
28 verbose request using bearer token for auth
29 verbose request id a982d22d7f7a6772
30 http request PUT https://registry.npmjs.org/ngn-chassis-components
31 http 403 https://registry.npmjs.org/ngn-chassis-components
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Fri, 05 Feb 2016 23:54:16 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-ord1721-ORD',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1454716455.356109,VS0,VE1103' }
33 verbose request invalidating /Users/cbutler/.npm/registry.npmjs.org/ngn-chassis-components on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.0.22." : ngn-chassis-components
35 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1063:14)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid ngn-chassis-components
38 verbose cwd /Users/cbutler/Workspace/NGN/Components/chassis/webcomponents
39 error Darwin 15.3.0
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "--registry" "https://registry.npmjs.org"
41 error node v4.2.1
42 error npm  v2.14.7
43 error code E403
44 error "You cannot publish over the previously published version 0.0.22." : ngn-chassis-components
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
